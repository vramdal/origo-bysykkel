{"version":3,"sources":["Types.ts","OsloBysykkelApi.ts","Reducer.ts","Actions.ts","Layout.tsx","App.tsx","Root.tsx","index.tsx"],"names":["FetchState","apiFetch","url","a","Promise","resolve","reject","setTimeout","fetch","headers","Headers","then","response","catch","error","fetchJson","json","getFeedUrl","autoDiscoveryFeed","feedName","match","data","nb","feeds","find","feed","name","Error","FETCH_AUTODISCOVERY","defaultState","urls","stationInfo","undefined","stationStatus","lastUpdated","ttl","Infinity","fetchStates","INITIALIZING","fetchState","doFetchFeed","actionName","dispatch","getState","fName","body","type","payload","console","finally","nextFetch","Table","props","role","className","classnames","children","Cell","Row","RowGroup","ColumnHeader","StateIndicator","indicatorType","text","FAILURE","data-testid","StationRow","station","stationName","disabled","isReturning","exhausted","numLocks","isRenting","numBikes","connect","state","stations","map","station_id","stationId","is_renting","is_returning","num_bikes_available","num_docks_available","useDispatch","useEffect","r","Fragment","key","middlewares","thunk","store","createStore","action","last_updated","SUCCESS","updatedState","sort","station1","station2","composeWithDevTools","applyMiddleware","RootComponent","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2643c761.chunk.js","sourcesContent":["export interface AutoDiscoveryFeedType {\n  last_updated: Seconds1970;\n  ttl: Seconds;\n  data: {\n    nb: {\n      feeds: [\n        {\n          url: string;\n          name: 'system_information';\n        },\n        {\n          url: string;\n          name: 'station_information';\n        },\n        {\n          url: string;\n          name: 'station_status';\n        },\n      ];\n    };\n  };\n}\n\nexport type Seconds1970 = number;\nexport type Seconds = number;\n\nexport interface SystemInformationFeedType {\n  last_updated: Seconds1970;\n  ttl: Seconds;\n  data: {\n    system_id: string;\n    language: string;\n    name: string;\n    operator: string;\n    timezone: string;\n    phone_number: string;\n    email: string;\n  };\n}\n\nexport interface StationInfoType {\n  station_id: string;\n  name: string;\n  address: string;\n  lat: number;\n  lon: number;\n  capacity: number;\n}\n\nexport interface StationInformationFeedType {\n  last_updated: Seconds1970;\n  ttl: Seconds;\n  data: {\n    stations: [StationInfoType];\n  };\n}\n\nexport interface StationStatusType {\n  is_installed: number;\n  is_renting: number;\n  num_bikes_available: number;\n  num_docks_available: number;\n  last_reported: Seconds1970;\n  is_returning: number;\n  station_id: string;\n}\n\nexport interface StationStatusFeedType {\n  last_updated: Seconds1970;\n  ttl: Seconds;\n  data: {\n    stations: [StationStatusType];\n  };\n}\n\nexport enum FetchState {\n  INITIALIZING = 'INITIALIZING',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE',\n}\n","import { AutoDiscoveryFeedType } from './Types';\n\nexport const apiFetch: (url: string) => Promise<Response> = async (url: string) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return fetch(url, {\n        headers: new Headers({\n          'Client-Identifier': 'vidarramdal-origo-oppgave',\n        }),\n      })\n        .then((response) => resolve(response))\n        .catch((error) => reject(error));\n    }, 1000);\n  });\n};\n\nexport const fetchJson: <T>(url: string) => Promise<T> = async (url: string) => {\n  return apiFetch(url).then((response) => response.json());\n};\n\nexport const URL_AUTODISCOVERY = 'https://gbfs.urbansharing.com/oslobysykkel.no/gbfs.json';\n\nexport function getFeedUrl(autoDiscoveryFeed: AutoDiscoveryFeedType, feedName: string): string {\n  const match = autoDiscoveryFeed.data.nb.feeds.find((feed) => feed.name === feedName);\n  if (!match) {\n    throw new Error('Har ikke URL til feed: ' + feedName);\n  }\n  return match.url;\n}\n","import {\n  AutoDiscoveryFeedType,\n  FetchState,\n  Seconds,\n  Seconds1970,\n  StationInformationFeedType,\n  StationInfoType,\n  StationStatusFeedType,\n  StationStatusType,\n} from './Types';\nimport { getFeedUrl } from './OsloBysykkelApi';\n\nexport const FETCH_AUTODISCOVERY = 'AUTODISCOVERY_COMPLETE';\nexport const FETCH_STATION_INFORMATION = 'STATION_INFORMATION_FETCHED';\nexport const FETCH_STATION_STATUS = 'STATION_STATUS_FETCHED';\nexport const FETCH_FAILED = 'FETCH_FAILED';\n\nexport const NEVER = -1;\n\nexport interface SystemState {\n  urls: {\n    stationInfo?: string;\n    stationStatus?: string;\n  };\n  lastUpdated: {\n    [FETCH_AUTODISCOVERY]: Seconds1970;\n    [FETCH_STATION_INFORMATION]: Seconds1970;\n    [FETCH_STATION_STATUS]: Seconds1970;\n  };\n  ttl: {\n    [FETCH_AUTODISCOVERY]: Seconds;\n    [FETCH_STATION_INFORMATION]: Seconds;\n    [FETCH_STATION_STATUS]: Seconds;\n  };\n  fetchStates: {\n    [FETCH_AUTODISCOVERY]: FetchState;\n    [FETCH_STATION_INFORMATION]: FetchState;\n    [FETCH_STATION_STATUS]: FetchState;\n  };\n  fetchState: FetchState;\n  stationInfo?: Array<StationInfoType>;\n  stationStatus?: Array<StationStatusType>;\n}\n\nexport interface AutoDiscoveryCompleteAction {\n  type: typeof FETCH_AUTODISCOVERY;\n  payload: AutoDiscoveryFeedType;\n}\n\nexport interface StationInformationFetchedAction {\n  type: typeof FETCH_STATION_INFORMATION;\n  payload: StationInformationFeedType;\n}\n\nexport interface StationStatusFetchedAction {\n  type: typeof FETCH_STATION_STATUS;\n  payload: StationStatusFeedType;\n}\n\nexport interface FetchErrorAction {\n  type: typeof FETCH_FAILED;\n  actionName: typeof FETCH_STATION_STATUS | typeof FETCH_STATION_INFORMATION | typeof FETCH_AUTODISCOVERY;\n}\n\nconst defaultState: SystemState = {\n  urls: {\n    stationInfo: undefined,\n    stationStatus: undefined,\n  },\n  lastUpdated: {\n    [FETCH_AUTODISCOVERY]: NEVER,\n    [FETCH_STATION_INFORMATION]: NEVER,\n    [FETCH_STATION_STATUS]: NEVER,\n  },\n  ttl: {\n    [FETCH_AUTODISCOVERY]: Infinity,\n    [FETCH_STATION_INFORMATION]: 60,\n    [FETCH_STATION_STATUS]: 20,\n  },\n  fetchStates: {\n    [FETCH_AUTODISCOVERY]: FetchState.INITIALIZING,\n    [FETCH_STATION_INFORMATION]: FetchState.INITIALIZING,\n    [FETCH_STATION_STATUS]: FetchState.INITIALIZING,\n  },\n  fetchState: FetchState.INITIALIZING,\n  stationInfo: undefined,\n  stationStatus: undefined,\n};\n\nexport type FetchSuccessActionTypes =\n  | AutoDiscoveryCompleteAction\n  | StationInformationFetchedAction\n  | StationStatusFetchedAction;\n\nexport type ActionTypes = FetchSuccessActionTypes | FetchErrorAction;\n\nexport function reducer(state = defaultState, action: ActionTypes): SystemState {\n  if (action.type === FETCH_FAILED) {\n    const fetchStates = { ...state.fetchStates, [action.actionName]: FetchState.FAILURE };\n    return {\n      ...state,\n      fetchState: FetchState.FAILURE,\n      fetchStates,\n    };\n  }\n  if (!action.payload || state.lastUpdated[action.type] >= action.payload.last_updated) {\n    return state;\n  } else {\n    const lastUpdated = { ...state.lastUpdated, [action.type]: action.payload.last_updated };\n    const ttl = { ...state.ttl, [action.type]: action.payload.ttl };\n    const fetchStates = { ...state.fetchStates, [action.type]: FetchState.SUCCESS };\n    const fetchState =\n      (fetchStates[FETCH_STATION_STATUS] === FetchState.SUCCESS &&\n        fetchStates[FETCH_STATION_INFORMATION] === FetchState.SUCCESS &&\n        fetchStates[FETCH_AUTODISCOVERY] === FetchState.SUCCESS &&\n        FetchState.SUCCESS) ||\n      ((fetchStates[FETCH_STATION_STATUS] === FetchState.FAILURE ||\n        fetchStates[FETCH_STATION_INFORMATION] === FetchState.FAILURE ||\n        fetchStates[FETCH_AUTODISCOVERY] === FetchState.FAILURE) &&\n        FetchState.FAILURE) ||\n      FetchState.INITIALIZING;\n    const updatedState = { ...state, lastUpdated, fetchState, ttl, fetchStates };\n    switch (action.type) {\n      case FETCH_AUTODISCOVERY:\n        return {\n          ...updatedState,\n          urls: {\n            stationInfo: getFeedUrl(action.payload, 'station_information'),\n            stationStatus: getFeedUrl(action.payload, 'station_status'),\n          },\n        };\n      case FETCH_STATION_INFORMATION:\n        return {\n          ...updatedState,\n          stationInfo: action.payload.data.stations.sort((station1, station2) =>\n            station1.name < station2.name ? -1 : 1,\n          ),\n        };\n      case FETCH_STATION_STATUS:\n        return {\n          ...updatedState,\n          stationStatus: action.payload.data.stations,\n        };\n      default:\n        return state;\n    }\n  }\n}\n","import {\n  FETCH_AUTODISCOVERY,\n  FETCH_FAILED,\n  FETCH_STATION_INFORMATION,\n  FETCH_STATION_STATUS,\n  SystemState,\n} from './Reducer';\nimport { fetchJson, URL_AUTODISCOVERY } from './OsloBysykkelApi';\nimport { ThunkAction } from 'redux-thunk';\nimport { Action } from 'redux';\nimport { Seconds, StationInformationFeedType, StationStatusFeedType } from './Types';\n\ntype FetchableFeed = StationStatusFeedType | StationInformationFeedType;\n\nexport const doFetchFeed = (\n  actionName: typeof FETCH_STATION_INFORMATION | typeof FETCH_STATION_STATUS,\n): ThunkAction<void, SystemState, unknown, Action<string>> => (dispatch, getState) => {\n  const fName = actionName === FETCH_STATION_INFORMATION ? 'stationInfo' : 'stationStatus';\n  const url = getState().urls[fName];\n  if (!url) {\n    // Skjer ved bruk av Redux Dev Tools i Chrome\n    return dispatch({\n      type: 'NO_OP',\n    });\n  }\n  return fetchJson<FetchableFeed>(url)\n    .then((body: FetchableFeed) => {\n      dispatch({\n        type: actionName,\n        payload: body,\n      });\n    })\n    .catch((error: Error) => {\n      console.error(`Error fetching ${fName} from ${url}`, error);\n      dispatch({\n        type: FETCH_FAILED,\n        actionName: actionName,\n      });\n    })\n    .finally(() => {\n      const nextFetch: Seconds = getState().ttl[actionName];\n      if (nextFetch < Infinity) {\n        setTimeout(() => {\n          dispatch(doFetchFeed(actionName));\n        }, nextFetch * 1000);\n      }\n    });\n};\n\nexport const doInitialFetch = (): ThunkAction<void, SystemState, unknown, Action<string>> => (dispatch) => {\n  return fetchJson(URL_AUTODISCOVERY)\n    .then((r) => {\n      dispatch({\n        type: FETCH_AUTODISCOVERY,\n        payload: r,\n      });\n      dispatch(doFetchFeed(FETCH_STATION_INFORMATION));\n      dispatch(doFetchFeed(FETCH_STATION_STATUS));\n    })\n    .catch((error: Error) => {\n      console.error('Error doing autodiscovery', error);\n      dispatch({\n        type: FETCH_FAILED,\n        actionName: FETCH_AUTODISCOVERY,\n      });\n    });\n};\n","import React, { ReactNode } from 'react';\nimport classnames from 'classnames';\n\nexport const Table = (props: { children: ReactNode; className?: string }): JSX.Element => (\n  <div role={'table'} className={classnames(props.className)}>\n    {props.children}\n  </div>\n);\n\nexport const Cell = (props: { children: ReactNode; className?: string }): JSX.Element => (\n  <div role={'cell'} className={props.className}>\n    {props.children}\n  </div>\n);\n\nexport const Row = (props: { children: ReactNode; className?: string }): JSX.Element => (\n  <div className={classnames('row', props.className)} role={'row'}>\n    {props.children}\n  </div>\n);\n\nexport const RowGroup = (props: { children: ReactNode; className?: string }): JSX.Element => (\n  <div className={props.className} role={'rowgroup'}>\n    {props.children}\n  </div>\n);\n\nexport const ColumnHeader = (props: { children: ReactNode; className?: string }): JSX.Element => (\n  <div className={classnames(props.className)} role={'columnheader'}>\n    {props.children}\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport classnames from 'classnames';\nimport { connect, useDispatch } from 'react-redux';\nimport { SystemState } from './Reducer';\nimport { doInitialFetch } from './Actions';\nimport { FetchState } from './Types';\nimport { Cell, ColumnHeader, Row, RowGroup, Table } from './Layout';\n\ntype DisplayStationStatus = {\n  stationId: string;\n  stationName: string;\n  numBikes?: number;\n  numLocks?: number;\n  isReturning: boolean;\n  isRenting: boolean;\n};\n\ntype DisplayStationStatusList = Array<DisplayStationStatus>;\n\nconst StateIndicator = (props: { fetchState: FetchState }): JSX.Element => {\n  let indicatorType;\n  let text;\n  let role;\n  switch (props.fetchState) {\n    case FetchState.INITIALIZING:\n      indicatorType = 'loading-indicator';\n      text = 'Vent litt, laster data ...';\n      break;\n    case FetchState.FAILURE:\n      indicatorType = 'failure-indicator';\n      text = 'Beklager, det oppsto en feil';\n      role = 'alert';\n      break;\n    default:\n      indicatorType = 'success-indicator';\n  }\n  const className = classnames('state-indicator', indicatorType);\n  return (\n    <div data-testid={indicatorType} className={className} role={role}>\n      {text}\n    </div>\n  );\n};\n\nconst StationRow = ({ station }: { station: DisplayStationStatus }): JSX.Element => (\n  <Row>\n    <Cell>{station.stationName}</Cell>\n    <Cell className={classnames({ disabled: !station.isReturning, exhausted: station.numLocks === 0 })}>\n      {station.numLocks}\n    </Cell>\n    <Cell className={classnames({ disabled: !station.isRenting, exhausted: station.numBikes === 0 })}>\n      {station.numBikes}\n    </Cell>\n  </Row>\n);\n\nconst App = (props: AppProps): JSX.Element => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(doInitialFetch());\n  }, [dispatch]);\n\n  return (\n    <React.Fragment>\n      <StateIndicator fetchState={props.fetchState} />\n      <Table className={classnames('station-table', { disabled: props.fetchState === FetchState.FAILURE })}>\n        <Row className={'station-table__header'}>\n          <ColumnHeader>Stasjon</ColumnHeader>\n          <ColumnHeader>Antall låser</ColumnHeader>\n          <ColumnHeader>Antall sykler</ColumnHeader>\n        </Row>\n        <RowGroup className={'station-table__body'}>\n          {props.stations?.map((station: DisplayStationStatus) => (\n            <StationRow key={station.stationId} station={station} />\n          ))}\n        </RowGroup>\n      </Table>\n    </React.Fragment>\n  );\n};\n\ninterface AppProps {\n  fetchState: FetchState;\n  stations?: DisplayStationStatusList;\n}\n\nconst mapStateToProps = (state: SystemState): AppProps => {\n  return {\n    fetchState: state.fetchState,\n    stations: state.stationInfo?.map((stationInfo) => {\n      const stationStatus = state.stationStatus?.find(\n        (stationStatus) => stationStatus.station_id === stationInfo.station_id,\n      );\n      return {\n        stationId: stationInfo.station_id,\n        stationName: stationInfo.name,\n        isRenting: stationStatus?.is_renting === 1 || false,\n        isReturning: stationStatus?.is_returning === 1 || false,\n        numBikes: stationStatus?.num_bikes_available,\n        numLocks: stationStatus?.num_docks_available,\n      };\n    }),\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { reducer } from './Reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middlewares = [thunk];\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(...middlewares)));\nexport const RootComponent = (): JSX.Element => (\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { RootComponent } from './Root';\n\nReactDOM.render(<RootComponent />, document.getElementById('root'));\n"],"sourceRoot":""}